[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Homework 4",
    "section": "",
    "text": "Welcome! Use the navbar to browse each task, or click below:\n\nTask 1 – Conceptual\nTask 2 – Delimited Data\nTask 3 – Excel + CSV"
  },
  {
    "objectID": "pages/task1.html",
    "href": "pages/task1.html",
    "title": "task1",
    "section": "",
    "text": "/MyData.csv\n\n\n\n\n\nReproducible, self-contained working directories with stable relative paths.\nRStudio auto-sets the working directory when the project opens; keeps data, code, and outputs organized.\nIt integrates smoothly with git/GitHub.\n\n\n\n\n\ngit: a distributed version control system for tracking changes, branching, and merging.\nGitHub: a cloud service that hosts git repositories and adds collaboration tools.\n\n\n\n\n\n\nTibbles print compactly (few rows/columns) and avoid automatic type conversion.\n\n(ii) Tibbles are stricter: no partial name matching with $, and subsetting keeps a tibble.\n\n\n\n\n\n# Load packages used below\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tibble)\n\nas_tibble(iris) |>\n  select(starts_with(\"Petal\"), Species) |>\n  filter(Petal.Length < 1.55) |>\n  arrange(Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          <dbl>       <dbl> <fct>  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows"
  },
  {
    "objectID": "pages/task2.html",
    "href": "pages/task2.html",
    "title": "task2",
    "section": "",
    "text": "library(readr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tibble)\n\nurl <- \"https://www4.stat.ncsu.edu/~online/datasets/glass.data\"\n\ncol_names <- c(\"Id\",\"RI\",\"Na\",\"Mg\",\"Al\",\"Si\",\"K\",\"Ca\",\"Ba\",\"Fe\",\"Type_of_glass\")\n\nglass = read_csv(\n  url,\n  col_names = col_names,\n  col_types = cols(\n    Id = col_integer(),\n    RI = col_double(),\n    Na = col_double(),\n    Mg = col_double(),\n    Al = col_double(),\n    Si = col_double(),\n    K  = col_double(),\n    Ca = col_double(),\n    Ba = col_double(),\n    Fe = col_double(),\n    Type_of_glass = col_integer()\n  )\n)\nglass\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>         <int>\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\n\n\n\n\n\n\n\n# Recode and filter in one chain\nglass_filtered = glass |>\n  mutate(Type_of_glass = case_when(\n    Type_of_glass == 1 ~ \"building_windows_float_processed\",\n    Type_of_glass == 2 ~ \"building_windows_non_float_processed\",\n    Type_of_glass == 3 ~ \"vehicle_windows_float_processed\",\n    Type_of_glass == 4 ~ \"vehicle_windows_non_float_processed\",\n    Type_of_glass == 5 ~ \"containers\",\n    Type_of_glass == 6 ~ \"tableware\",\n    Type_of_glass == 7 ~ \"headlamps\"\n  )) |>\n  filter(Fe < 0.2, Type_of_glass %in% c(\"tableware\", \"headlamps\"))\n\n# Show results\nglass_filtered\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows\n\n\n\n\n\n\n\n\nlibrary(readr)\nlibrary(dplyr)\n\nurl = \"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\"\n\ncol_names = c(\"seq_name\",\"mcg\",\"gvh\",\"alm\",\"mit\",\n               \"erl\",\"pox\",\"vac\",\"nuc\",\"class\")\n\nyeast = read_table(\n  file = url,\n  col_names = col_names,\n  col_types = cols(\n    seq_name = col_character(),\n    mcg = col_double(),\n    gvh = col_double(),\n    alm = col_double(),\n    mit = col_double(),\n    erl = col_double(),  \n    pox = col_double(),  \n    vac = col_double(),\n    nuc = col_double(),\n    class = col_character()\n  )\n)\n\nyeast\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   <chr>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\n\n\n\n\n# drop seq_name and nuc\nyeast_clean = yeast |>\n  select(-seq_name, -nuc)\n\n\n\n\n\n# summarize by class \nyeast_summary = yeast_clean |>\n  group_by(class) |>\n  summarise(\n    across(\n      c(mcg, gvh, alm, mit, erl, pox, vac),\n      list(mean = mean, median = median),\n      .names = \"{.col}_{.fn}\"\n    ),\n    .groups = \"drop\"\n  )\n\nyeast_summary\n\n# A tibble: 10 × 15\n   class mcg_mean mcg_median gvh_mean gvh_median alm_mean alm_median mit_mean\n   <chr>    <dbl>      <dbl>    <dbl>      <dbl>    <dbl>      <dbl>    <dbl>\n 1 CYT      0.481       0.48    0.470      0.46     0.535      0.53     0.227\n 2 ERL      0.792       0.78    0.772      0.8      0.482      0.5      0.336\n 3 EXC      0.735       0.77    0.717      0.73     0.493      0.49     0.292\n 4 ME1      0.789       0.78    0.757      0.73     0.376      0.365    0.312\n 5 ME2      0.722       0.76    0.603      0.59     0.415      0.41     0.283\n 6 ME3      0.431       0.43    0.490      0.49     0.364      0.36     0.213\n 7 MIT      0.521       0.51    0.533      0.53     0.517      0.52     0.404\n 8 NUC      0.452       0.45    0.456      0.46     0.529      0.53     0.228\n 9 POX      0.521       0.48    0.508      0.505    0.506      0.51     0.248\n10 VAC      0.548       0.56    0.526      0.505    0.465      0.495    0.201\n# ℹ 7 more variables: mit_median <dbl>, erl_mean <dbl>, erl_median <dbl>,\n#   pox_mean <dbl>, pox_median <dbl>, vac_mean <dbl>, vac_median <dbl>"
  },
  {
    "objectID": "pages/task3.html",
    "href": "pages/task3.html",
    "title": "task3",
    "section": "",
    "text": "library(readxl)\nlibrary(readr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# 1. Import white wine Excel file (sheet 1)\nwhite_wine = read_excel(\"~/Desktop/NCSU/Fall 2025/ST558/Homework4/white-wine.xlsx\", sheet = 1)\n\n# 2. Fix column names:\n\nalt_names = read_excel(\"~/Desktop/NCSU/Fall 2025/ST558/Homework4/white-wine.xlsx\", sheet = 2)[[1]]\ncolnames(white_wine) = alt_names\n\n# 3. Add column to indicate type\nwhite_wine = white_wine |>\n  mutate(type = \"white\")\n\n# 4. Import red wine CSV (semicolon-delimited)\nred_wine = read_delim(\n  \"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\",\n  delim = \";\"\n)\n\nRows: 1599 Columns: 12\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Replace column names with the same `alt_names`\ncolnames(red_wine) = alt_names\n\n# Add column to indicate type\nred_wine = red_wine |>\n  mutate(type = \"red\")\n\n# 5. Combine white + red into one tibble\nwine = bind_rows(white_wine, red_wine)\n\n# 6. Filter high-quality wines:\n#    - quality > 6.5\n#    - alcohol < 13.2\nhigh_quality = wine |>\n  filter(quality > 6.5, alcohol < 13.2)\n\n# 7. Sort from highest to lowest quality\nhigh_quality = high_quality |>\n  arrange(desc(quality))\n\n# 8. Select only alcohol, type, quality\nhigh_quality_small = high_quality |>\n  select(alcohol, type, quality)\n\n# 9. Add mean & sd of alcohol by quality\nsummary_stats = high_quality_small |>\n  group_by(quality) |>\n  summarise(\n    mean_alcohol = mean(alcohol, na.rm = TRUE),\n    sd_alcohol   = sd(alcohol, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# Show final outputs\nhigh_quality_small\n\n# A tibble: 365 × 3\n   alcohol type  quality\n     <dbl> <chr>   <dbl>\n 1      11 white       8\n 2      11 white       8\n 3      11 white       8\n 4      11 white       8\n 5      12 white       8\n 6      11 white       8\n 7      11 white       8\n 8      12 white       8\n 9      13 white       8\n10      13 white       8\n# ℹ 355 more rows\n\nsummary_stats\n\n# A tibble: 2 × 3\n  quality mean_alcohol sd_alcohol\n    <dbl>        <dbl>      <dbl>\n1       7         11.2      1.10 \n2       8         11.9      0.935"
  }
]